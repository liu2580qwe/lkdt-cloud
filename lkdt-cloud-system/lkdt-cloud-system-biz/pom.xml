<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>lkdt-cloud-system-biz</artifactId>
	<parent>
		<artifactId>lkdt-cloud-system</artifactId>
		<groupId>org.lkdtframework.cloud</groupId>
		<version>2.2.0</version>
	</parent>

	<dependencies>
		<!-- lkdt cloud quick starter -->
		<dependency>
			<groupId>org.lkdtframework.cloud</groupId>
			<artifactId>lkdt-common-cloud-starter</artifactId>
			<version>${lkdtboot.version}</version>
		</dependency>

		<!-- 第三方登录 -->
		<dependency>
			<groupId>com.xkcoding.justauth</groupId>
			<artifactId>justauth-spring-boot-starter</artifactId>
			<!--<version>1.3.2</version>-->
			<version>1.3.3</version>
			<exclusions>
				<exclusion>
					<artifactId>fastjson</artifactId>
					<groupId>com.alibaba</groupId>
				</exclusion>
			</exclusions>
		</dependency>
        <dependency>
            <groupId>org.lkdtframework.cloud</groupId>
            <artifactId>lkdt-cloud-weixin-api</artifactId>
            <version>2.2.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.lkdtframework.cloud</groupId>
            <artifactId>lkdt-cloud-fog-api</artifactId>
            <version>2.2.0</version>
            <scope>compile</scope>
        </dependency>
        <!-- online -->
		<!--<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-re</artifactId>
			<version>2.1.5</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<exclusions>
				<exclusion>
					<groupId>commons-collections</groupId>
					<artifactId>commons-collections</artifactId>
				</exclusion>
			</exclusions>
		</dependency>-->
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.2.1</version>
				<!--将插件绑定在某个phase执行-->
				<executions>
					<execution>
						<id>build-image</id>
						<!--用户只需执行mvn package ，就会自动执行mvn docker:build-->
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>

				<configuration>
					<!--指定生成的镜像名,这里是我们的作者名+项目名-->
					<imageName>huangjy/${project.artifactId}</imageName>

					<!--指定标签 这里指定的是镜像的版本，我们默认版本是latest-->
					<!--                    <imageTags>-->
					<!--                        <imageTag>1.0</imageTag>-->
					<!--                    </imageTags>-->

					<!--指定基础镜像jdk1.8-->
					<baseImage>java</baseImage>
					<!--
                    镜像制作人本人信息
                    <maintainer>bruceliu@email.com</maintainer>
                    -->
					<!--切换到ROOT目录-->
					<workdir>/ROOT</workdir>

					<!--查看我们的java版本-->
					<cmd>["java", "-version"]</cmd>

					<!--${project.build.finalName}.jar是打包后生成的jar包的名字-->
					<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>

					<!--指定远程 docker api地址-->
					<dockerHost>http://192.168.3.72:2375</dockerHost>

					<!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<!--jar 包所在的路径  此处配置的 即对应 target 目录-->
							<directory>${project.build.directory}</directory>
							<!--用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　-->
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>

				</configuration>
			</plugin>
		</plugins>
	</build>
</project>